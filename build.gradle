buildscript {
    ext {
        springBootVersion = '1.4.0.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.16")
        classpath("org.liquibase:liquibase-gradle-plugin:1.2.1")
        classpath("com.h2database:h2:1.4.192")
        classpath("org.liquibase:liquibase-core:3.5.1")
        classpath 'com.moowork.gradle:gradle-node-plugin:0.13'
        classpath 'com.diffplug.gradle.spotless:spotless:1.3.2'
    }
}

plugins {
    id "org.sonarqube" version "2.1-rc1"
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: "com.moowork.node"
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.liquibase.gradle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'
apply plugin: 'com.diffplug.gradle.spotless'

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}
version = getVersionName()
group = 'demo'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://repository.primefaces.org" }
}

dependencies {
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-configuration-processor')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-cache')
//    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.session:spring-session')

    compile('org.springframework.boot:spring-boot-starter-thymeleaf') {
        exclude group: 'nz.net.ultraq.thymeleaf', module: 'thymeleaf-layout-dialect'
    }
    compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.2.RELEASE")
    compile("org.thymeleaf.extras:thymeleaf-extras-java8time:2.1.0.RELEASE")

    compile('io.springfox:springfox-swagger2:2.5.0')
    compile('io.springfox:springfox-swagger-ui:2.5.0')

    compile("com.ryantenney.metrics:metrics-spring:3.1.3")

    compile('de.ruedigermoeller:fst:2.47')

    compile('org.joinfaces:jsf-spring-boot-starter:2.0.0')

    compile('org.liquibase:liquibase-core')

    compile 'com.github.ben-manes.caffeine:caffeine'

//    compile("org.apache.commons:commons-pool2:2.4.2")
//    compile('org.springframework.retry:spring-retry')

    runtime('com.h2database:h2:1.4.192')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')
    testCompile("org.seleniumhq.selenium:selenium-firefox-driver:2.53.0")
    testCompile("org.seleniumhq.selenium:selenium-support:2.53.0")
    testCompile("org.powermock:powermock-api-mockito:1.6.5")
    testCompile("org.powermock:powermock-module-junit4:1.6.5")
}

processResources {
    from('src/main/resources') {
        include 'application.yaml'
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: project.version.toString()])
    }
}

liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/db/changelog/db.changelog-master.xml'
            url 'jdbc:h2:file:~/.demo/demo-jsf;AUTO_SERVER=TRUE'
            username 'sa'
            password 'sa'
        }
    }
}

bootRun {
    addResources = true
}

sonarqube {
    properties {
        property "sonar.host.url", "http://192.168.99.100:32768"
        property "sonar.projectName", "spring jsf project"
        property "sonar.projectKey", "${project.group}:${project.name}"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.exclusions", ""
    }
}

task h2Tcp(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.h2.tools.Console"
    args["-tcp"]
}

task buildInfoProperties << {
    def file = new File(project.buildDir, 'resources/main/META-INF/build-info.properties')
    if (!file.parentFile.exists()) {
        file.parentFile.mkdirs()
    }
    if (file.exists()) {
        assert file.delete()
    }
    assert file.createNewFile()
    logger.info "writing to [${file}]"
    def map = [
            "build.version"            : version,
            "build.spring.boot.version": springBootVersion,
            "build.artifact"           : project.name,
            "build.group"              : project.group,
            "build.name"               : rootProject.name,
            "build.time"               : new Date().time,
    ]

    file.withWriter('UTF-8') { w ->
        map.each { key, value ->
            w.writeLine "$key=$value"
        }
    }
}

import com.moowork.gradle.node.task.NodeTask

task webpack(type: NodeTask, dependsOn: 'npmInstall') {
    script = project.file('node_modules/webpack/bin/webpack.js')
}

task webpackWatch(type: NodeTask, dependsOn: 'npmInstall') {
    script = project.file('node_modules/webpack/bin/webpack.js')
    args = ['--watch', '--display-error-details']
}

processResources.dependsOn 'webpack'

clean.delete << file('src/main/webapp/dist')


processResources.dependsOn << buildInfoProperties

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

spotless {
    java {
        eclipseFormatFile 'spotless.eclipseformat.xml'    // XML file dumped out by the Eclipse formatter
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()

        // Eclipse formatter puts excess whitespace after lambda blocks
        //    funcThatTakesLambdas(x -> {} , y -> {} )	// what Eclipse does
        //    funcThatTakesLambdas(x -> {}, y -> {})	// what I wish Eclipse did
        custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }

        // Eclipse formatter screws up long literals with underscores inside of annotations (see issue #14)
        //    @Max(value = 9_999_999 L) // what Eclipse does
        //    @Max(value = 9_999_999L)  // what I wish Eclipse did
        custom 'Long literal fix', { it.replaceAll('([0-9_]+) [Ll]', '$1L') }
    }
    format 'misc', {
        target '**/.gitignore', '**/*.gradle', '**/*.md', '**/*.sh'
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}
