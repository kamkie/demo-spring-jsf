buildscript {
    ext {
        springBootVersion = '1.5.0.RC1'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://repo.spring.io/libs-milestone' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.liquibase:liquibase-gradle-plugin:1.2.1")
        classpath("com.h2database:h2:1.4.193")
        classpath("org.liquibase:liquibase-core:3.5.3")
        classpath 'com.moowork.gradle:gradle-node-plugin:1.1.0'
        classpath 'com.toomuchcoding:uptodate-gradle-plugin:1.0.0'
    }
}

plugins {
    id 'com.palantir.git-version' version '0.5.3'
    id "org.sonarqube" version "2.2.1"
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
    id "com.diffplug.gradle.spotless" version "2.4.1"
}

//apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: "com.moowork.node"
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.liquibase.gradle'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'com.toomuchcoding.uptodate'

version = gitVersion()
group = 'demo'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "http://repository.primefaces.org" }
    maven { url 'https://repo.spring.io/libs-milestone' }
}

dependencyManagement {
    imports {
//        mavenBom 'org.springframework.cloud:spring-cloud-sleuth:1.1.0.RELEASE'
    }
}

ext['thymeleaf.version'] = '3.0.1.RELEASE'
ext['selenium.version'] = '3.0.1'

dependencies {
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-configuration-processor')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-cache')
//    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.session:spring-session')
//    compile 'org.springframework.cloud:spring-cloud-starter-sleuth'

    compile('org.springframework.boot:spring-boot-starter-thymeleaf') {
        exclude group: 'nz.net.ultraq.thymeleaf', module: 'thymeleaf-layout-dialect'
    }
    compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity4:3.0.1.RELEASE")
    compile("org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.0.RELEASE")

    compile('io.springfox:springfox-swagger2:2.6.1')
    compile('io.springfox:springfox-swagger-ui:2.6.1')

    compile("com.ryantenney.metrics:metrics-spring:3.1.3")

    compile('de.ruedigermoeller:fst:2.48')

    compile('org.joinfaces:jsf-spring-boot-starter:2.3.4')
    compile group: 'org.primefaces.themes', name: 'bootstrap', version: '1.0.10'


    compile('org.liquibase:liquibase-core')

    compile 'com.github.ben-manes.caffeine:caffeine'

//    compile("org.apache.commons:commons-pool2:2.4.2")
//    compile('org.springframework.retry:spring-retry')

    runtime('com.h2database:h2:1.4.193')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.restdocs:spring-restdocs-mockmvc')

    testCompile("io.github.bonigarcia:webdrivermanager:1.5.0")
    testCompile("org.seleniumhq.selenium:selenium-chrome-driver")
    testCompile("org.seleniumhq.selenium:selenium-support")

    testCompile("org.powermock:powermock-api-mockito:1.6.6")
    testCompile("org.powermock:powermock-module-junit4:1.6.6")
}

processResources {
    from('src/main/resources') {
        include 'application.yaml'
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: project.version.toString()])
    }
}

liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/db/changelog/db.changelog-master.xml'
            url 'jdbc:h2:file:~/.demo/demo-jsf;AUTO_SERVER=TRUE'
            username 'sa'
            password 'sa'
        }
    }
}

bootRun {
    addResources = true
    systemProperties["spring.output.ansi.enabled"] = "always"
}

sonarqube {
    properties {
        property "sonar.host.url", System.getenv("SONAR_URL") ?: "http://127.0.0.1:9000"
        property "sonar.projectName", "spring jsf project"
        property "sonar.projectKey", "${project.group}:${project.name}"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.exclusions", ""
    }
}

task h2Tcp(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.h2.tools.Console"
    args["-tcp"]
}

task buildInfoProperties {
    doLast {
        def file = new File(project.buildDir, 'resources/main/META-INF/build-info.properties')
        if (!file.parentFile.exists()) {
            file.parentFile.mkdirs()
        }
        if (file.exists()) {
            assert file.delete()
        }
        assert file.createNewFile()
        logger.info "writing to [${file}]"
        def map = [
                "build.version"            : version,
                "build.spring.boot.version": springBootVersion,
                "build.artifact"           : project.name,
                "build.group"              : project.group,
                "build.name"               : rootProject.name,
                "build.time"               : new Date().time,
        ]

        file.withWriter('UTF-8') { w ->
            map.each { key, value ->
                w.writeLine "$key=$value"
            }
        }
    }
}

task webpack(type: NodeTask, dependsOn: 'npmInstall') {
    script = project.file('node_modules/webpack/bin/webpack.js')
}

task webpackWatch(type: NodeTask, dependsOn: 'npmInstall') {
    script = project.file('node_modules/webpack/bin/webpack.js')
    args = ['--watch', '--display-error-details']
}

//dependencyUpdates.dependsOn 'dependencyManagement'
processResources.dependsOn 'webpack'

clean.delete << file('src/main/webapp/dist')


processResources.dependsOn << buildInfoProperties

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

spotless {
    java {
        eclipseFormatFile 'spotless.eclipseformat.xml'    // XML file dumped out by the Eclipse formatter
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()

        // Eclipse formatter puts excess whitespace after lambda blocks
        //    funcThatTakesLambdas(x -> {} , y -> {} )	// what Eclipse does
        //    funcThatTakesLambdas(x -> {}, y -> {})	// what I wish Eclipse did
        custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }

        // Eclipse formatter screws up long literals with underscores inside of annotations (see issue #14)
        //    @Max(value = 9_999_999 L) // what Eclipse does
        //    @Max(value = 9_999_999L)  // what I wish Eclipse did
        custom 'Long literal fix', { it.replaceAll('([0-9_]+) [Ll]', '$1L') }
    }
    format 'misc', {
        target '**/.gitignore', '**/*.gradle', '*.md', 'src/**/*.md', '**/*.sh'
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}
