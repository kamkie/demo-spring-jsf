buildscript {
    ext {
        springBootVersion = '2.0.0.M7'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.liquibase:liquibase-gradle-plugin:1.2.4")
        classpath("com.h2database:h2:1.4.196")
        classpath("org.liquibase:liquibase-core:3.5.3")
        classpath('com.moowork.gradle:gradle-node-plugin:1.1.0')
        classpath('com.toomuchcoding:uptodate-gradle-plugin:1.0.1')
    }
}

plugins {
    id 'com.palantir.git-version' version '0.10.0'
    id "org.sonarqube" version "2.6.1"
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
    id "com.diffplug.gradle.spotless" version "2.4.1"
    id 'com.github.ben-manes.versions' version '0.17.0'
    id "com.github.spotbugs" version "1.6.0"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.moowork.node"
apply plugin: 'com.gorylenko.gradle-git-properties'
apply plugin: 'org.liquibase.gradle'
apply plugin: 'pmd'
apply plugin: 'com.github.spotbugs'
apply plugin: 'jacoco'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'com.toomuchcoding.uptodate'

version = gitVersion()
group = 'demo'
sourceCompatibility = 1.9
targetCompatibility = 1.9

repositories {
    mavenCentral()
    maven { url "http://repository.primefaces.org" }
    maven { url "https://artifacts.alfresco.com/nexus/content/repositories/public/" }
    maven { url "https://repo.spring.io/milestone" }
}

ext['selenium.version'] = '3.8.1'
ext['caffeine.version'] = '2.6.0'

dependencies {
    // https://mvnrepository.com/artifact/com.google.code.findbugs/jsr305
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

//    compile('org.projectlombok:lombok:1.16.20')//when it will be available
    compile files('lib/lombok-edge.jar')
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-configuration-processor')
    compile('org.springframework.boot:spring-boot-starter-aop')
    compile('org.springframework.boot:spring-boot-starter-cache')
//    compile('org.springframework.boot:spring-boot-starter-mail')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.session:spring-session-jdbc')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
//    compile('org.springframework.retry:spring-retry')

    compile("org.thymeleaf.extras:thymeleaf-extras-java8time")
    compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity4")
    compile('org.liquibase:liquibase-core')
    compile('com.github.ben-manes.caffeine:caffeine')
    compile('io.micrometer:micrometer-registry-prometheus')

    compile('io.springfox:springfox-swagger2:2.7.0')
    compile('io.springfox:springfox-swagger-ui:2.7.0')
    compile('org.joinfaces:jsf-spring-boot-starter:2.4.1')
    compile('org.primefaces.themes:bootstrap:1.0.10')
    compile('de.ruedigermoeller:fst:2.56')
//    compile 'org.zalando:logbook-spring-boot-starter:1.2.1'
//    compile("org.apache.commons:commons-pool2:2.4.2")

    runtime('com.h2database:h2')

    // https://mvnrepository.com/artifact/de.appelgriepsch.logback/logback-gelf-appender
    runtime group: 'de.appelgriepsch.logback', name: 'logback-gelf-appender', version: '1.3.1'

    // https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0' //required on java 9

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
    testCompile("io.github.bonigarcia:webdrivermanager:2.0.1")
    testCompile("org.seleniumhq.selenium:selenium-chrome-driver")
    testCompile("org.seleniumhq.selenium:selenium-support")
}

sourceSets {
    main {
        resources {
            srcDirs = ["build/generated/", "src/main/resources"]
        }
    }
}

springBoot {
    buildInfo()
}

bootRun {
//    sourceResources sourceSets.main
    systemProperty 'spring.output.ansi.enabled', "always"
    systemProperty 'spring.profiles.active', "graylog"
}

bootJar {
    classifier = 'boot'
}


task springConfiguration(type: Copy) {
    inputs.files("$buildDir/classes/main", "$buildDir/classes/java/main")
    outputs.dir("$buildDir/generated")
    from file("$buildDir/classes/java/main/META-INF/")
    into file("$buildDir/generated/META-INF/")
    doLast {
        file("$buildDir/classes/java/main/META-INF").deleteDir()
    }
}
classes.dependsOn springConfiguration
compileJava.dependsOn processResources
processResources.dependsOn generateGitProperties
bootBuildInfo.mustRunAfter processResources
springConfiguration.mustRunAfter compileJava
build.dependsOn jacocoTestReport

liquibase {
    activities {
        main {
            changeLogFile 'src/main/resources/db/changelog/db.changelog-master.xml'
            url 'jdbc:h2:file:~/.demo/demo-jsf;AUTO_SERVER=TRUE'
            username 'sa'
            password 'sa'
        }
    }
}

sonarqube {
    properties {
        property "sonar.host.url", System.getenv("SONAR_URL") ?: "http://127.0.0.1:9000"
        property "sonar.projectName", "spring jsf project"
        property "sonar.projectKey", "${project.group}:${project.name}"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.exclusions", ""
    }
}

task h2Tcp(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.h2.tools.Console"
    args["-tcp"]
    classpath = buildscript.configurations.classpath
    setDependsOn([])
}

task webpack(type: NodeTask, dependsOn: 'npmInstall') {
    script = project.file('node_modules/webpack/bin/webpack.js')
}

task webpackWatch(type: NodeTask, dependsOn: 'npmInstall') {
    script = project.file('node_modules/webpack/bin/webpack.js')
    args = ['--watch', '--display-error-details']
}
processResources.dependsOn 'webpack'

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

spotless {
    java {
        eclipseFormatFile 'spotless.eclipseformat.xml'    // XML file dumped out by the Eclipse formatter
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()

        // Eclipse formatter puts excess whitespace after lambda blocks
        //    funcThatTakesLambdas(x -> {} , y -> {} )	// what Eclipse does
        //    funcThatTakesLambdas(x -> {}, y -> {})	// what I wish Eclipse did
        custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }

        // Eclipse formatter screws up long literals with underscores inside of annotations (see issue #14)
        //    @Max(value = 9_999_999 L) // what Eclipse does
        //    @Max(value = 9_999_999L)  // what I wish Eclipse did
        custom 'Long literal fix', { it.replaceAll('([0-9_]+) [Ll]', '$1L') }
    }
    format 'misc', {
        target fileTree('.') {
            include '.gitignore', '**/.gitignore', 'build.gradle', '*.md', 'src/**/*.md', '*.sh', 'src/**/*.sh'
            exclude 'node_modules/**', 'out/**'
        }
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
    distributionType = org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL
}
