plugins {
    id "com.palantir.git-version" version "0.12.3"
    id "org.sonarqube" version "3.3"
    id "com.gorylenko.gradle-git-properties" version "2.3.1"
    id "com.diffplug.spotless" version "5.17.1"
    id "com.github.ben-manes.versions" version "0.39.0"
    id "com.github.spotbugs" version "4.7.9"
    id "org.springframework.boot" version "2.5.6"
    id "org.liquibase.gradle" version "2.0.4"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "com.moowork.node" version "1.3.1"
    id "com.ofg.uptodate" version "1.6.3"
    id 'com.adarshr.test-logger' version '3.0.0'
}

apply plugin: "java"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "com.moowork.node"
apply plugin: "pmd"
apply plugin: "jacoco"

def javaVersion = JavaVersion.VERSION_17
def springBootVersion = "2.5.6"
def springfoxVersion = "3.0.0"
def joinfacesVersion = "4.4.6"
ext["snippetsDir"] = "build/generated-snippets"

version = gitVersion()
group = "demo"

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    mavenCentral()
    maven { url "https://repository.primefaces.org" }
}

configurations {
    create("asciidoctor")
    liquibaseRuntime.extendsFrom implementation
}

dependencies {
    implementation(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
    annotationProcessor(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
    testAnnotationProcessor(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))
    asciidoctor(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion"))

    annotationProcessor("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
//    annotationProcessor("org.springframework:spring-context-indexer")

    asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor"

    liquibaseRuntime("org.postgresql:postgresql")
    liquibaseRuntime("org.liquibase:liquibase-core")

    // https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs-annotations
    implementation group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.4.2'
    implementation("org.projectlombok:lombok")

    implementation("org.springframework.boot:spring-boot-devtools")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.session:spring-session-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")

    implementation("org.thymeleaf.extras:thymeleaf-extras-java8time")
    implementation("org.thymeleaf.extras:thymeleaf-extras-springsecurity5")
    implementation("org.liquibase:liquibase-core")
    implementation("com.github.ben-manes.caffeine:caffeine")
    implementation("io.micrometer:micrometer-registry-prometheus")

    implementation("io.springfox:springfox-swagger2:$springfoxVersion")
    implementation("io.springfox:springfox-swagger-ui:$springfoxVersion")
    implementation("org.joinfaces:primefaces-spring-boot-starter:$joinfacesVersion")
    implementation("org.primefaces.themes:bootstrap:1.0.10")
    implementation("de.ruedigermoeller:fst:3.0.3")
    implementation("org.postgresql:postgresql")
    // https://mvnrepository.com/artifact/de.appelgriepsch.logback/logback-gelf-appender
    implementation group: "de.appelgriepsch.logback", name: "logback-gelf-appender", version: "1.5"

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation("io.github.bonigarcia:selenium-jupiter:4.0.1")
    testImplementation("org.seleniumhq.selenium:selenium-java")
    testImplementation("org.testcontainers:postgresql:1.16.2") {
        exclude group: "log4j", module: "log4j"
    }
}

sourceSets {
    main {
        resources.srcDir "${buildDir}/generated/"
    }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("${buildDir}/resources/main/")
    }
}

springBoot {
    buildInfo()
}

bootRun {
    systemProperty "spring.output.ansi.enabled", "always"
    systemProperty "spring.profiles.active", "graylog"
    classpath = getProject().files(sourceSets.main.getResources().getSrcDirs(), classpath)
}

bootJar {
    archiveClassifier.set("boot")
    dependsOn asciidoctor
    layered {
        enabled = true
    }
}

test {
    outputs.dir("build/generated-snippets")
}

asciidoctor {
    configurations("asciidoctor")
    inputs.dir(snippetsDir)
    dependsOn(test)
    sourceDir("src/docs/asciidoc")
    attributes(
            stylesheet: "amies.css",
            stylesdir: "styles",
            springbootversion: "$springBootVersion",
            projectdir: "$projectDir"
    )
    outputs.dir("build/resources/main")
    doLast {
        copy {
            from "build/docs/asciidoc/"
            into "build/resources/main/static/docs"
            include "index.html"
        }
    }
}

task springConfiguration(type: Copy) {
    inputs.files("$buildDir/classes/java/main")
    outputs.dir("$buildDir/generated")
    from file("$buildDir/classes/java/main/META-INF/")
    into file("$buildDir/generated/META-INF/")
    doLast {
        file("$buildDir/classes/java/main/META-INF").deleteDir()
    }
}
classes.dependsOn springConfiguration
compileJava.dependsOn processResources
generateGitProperties.mustRunAfter processResources
bootBuildInfo.mustRunAfter processResources
springConfiguration.mustRunAfter compileJava
test.finalizedBy(jacocoTestReport)


liquibase {
    activities {
        main {
            changeLogFile "src/main/resources/db/changelog/db.changelog-master.xml"
            url "jdbc:postgresql://localhost:5432/spring-demo"
            username "dev"
            password "dev"
        }
    }
}

jacoco.toolVersion = "0.8.7"
jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

spotbugs {
    toolVersion = "4.4.1"
    excludeFilter = layout.projectDirectory.file('spotbugs-exclude.xml')
}
pmd {
    toolVersion = "6.21.0"
    ruleSetFiles(new File("pmd.ruleset.xml"))
    ruleSets = []
}

sonarqube {
    properties {
        property "sonar.host.url", System.getenv("SONAR_URL") ?: "http://127.0.0.1:9000"
        property "sonar.projectName", "spring jsf project"
        property "sonar.projectKey", "${project.group}:${project.name}"
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
        property "sonar.exclusions", ""
    }
}
tasks.sonarqube.setDependsOn([])


task h2Tcp(type: JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    main = "org.h2.tools.Console"
    args["-tcp"]
    classpath = buildscript.configurations.classpath
    setDependsOn([])
}

node {
    // Version of node to use.
    version = '14.13.1'
}

task webpack(type: NodeTask, dependsOn: "npmInstall") {
    inputs.files("src/main/resources/static/javascript")
    outputs.dir("build/resources/main/static/javascript")
    script = project.file("node_modules/webpack/bin/webpack.js")
}

task webpackWatch(type: NodeTask, dependsOn: "npmInstall") {
    script = project.file("node_modules/webpack/bin/webpack.js")
    args = ["--watch", "--display-error-details"]
}
processResources.dependsOn "webpack"

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

spotless {
    java {
        eclipse().configFile "spotless.eclipseformat.xml"    // XML file dumped out by the Eclipse formatter
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()

        // Eclipse formatter puts excess whitespace after lambda blocks
        //    funcThatTakesLambdas(x -> {} , y -> {} )	// what Eclipse does
        //    funcThatTakesLambdas(x -> {}, y -> {})	// what I wish Eclipse did
        custom "Lambda fix", { it.replace("} )", "})").replace("} ,", "},") }

        // Eclipse formatter screws up long literals with underscores inside of annotations (see issue #14)
        //    @Max(value = 9_999_999 L) // what Eclipse does
        //    @Max(value = 9_999_999L)  // what I wish Eclipse did
        custom "Long literal fix", { it.replaceAll("([0-9_]+) [Ll]", "\$1L") }
    }
    format "misc", {
        target fileTree(".") {
            include ".gitignore", "**/.gitignore", "build.gradle", "*.md", "src/**/*.md", "*.sh", "src/**/*.sh"
            exclude "node_modules/**", "out/**"
        }
        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    doFirst {
        jvmArgs = [
                '--add-opens=java.base/java.lang=ALL-UNNAMED',
                '--add-opens=java.base/java.math=ALL-UNNAMED',
                '--add-opens=java.base/java.util=ALL-UNNAMED',
                '--add-opens=java.base/java.util.concurrent=ALL-UNNAMED',
                '--add-opens=java.base/java.net=ALL-UNNAMED',
                '--add-opens=java.base/java.text=ALL-UNNAMED',
                '--add-opens=java.sql/java.sql=ALL-UNNAMED'

        ]
    }
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", /*"standardOut",*/ "standardError"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
    }
}

wrapper {
    gradleVersion = "7.2"
    distributionType = Wrapper.DistributionType.ALL
}
